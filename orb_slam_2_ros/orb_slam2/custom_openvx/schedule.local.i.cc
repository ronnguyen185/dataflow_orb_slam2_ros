o.deepLearning[0]->setTime( 10000);
QUEUES[0].push_back(pk(o.scales[0], true));
QUEUES[0].push_back(pk(o.scales[1], true));
QUEUES[0].push_back(pk(o.fast_k[0], true));
QUEUES[0].push_back(pk(o.scales[2], true));
QUEUES[0].push_back(pk(o.scales[3], true));
QUEUES[0].push_back(pk(o.fast_k[3], true));
QUEUES[0].push_back(pk(o.scales[4], true));
QUEUES[0].push_back(pk(o.fast_k[4], true));
QUEUES[0].push_back(pk(o.scales[5], true));//
QUEUES[0].push_back(pk(o.fast_k[5], true));
QUEUES[0].push_back(pk(o.scales[6], true));//
QUEUES[0].push_back(pk(o.fast_k[6], true));
QUEUES[0].push_back(pk(o.fast_k[7], true));
QUEUES[0].push_back(pk(o.gaussian[6], true));
QUEUES[0].push_back(pk(o.gaussian[7], true));
//QUEUES[0].push_back(pk(o.deepLearning[0], false));
QUEUES[1].push_back(pk(o.grid[0], false));
QUEUES[2].push_back(pk(o.fast_k[1], false));
QUEUES[1].push_back(pk(o.quadtree[0], false));
QUEUES[2].push_back(pk(o.grid[1], false));
QUEUES[3].push_back(pk(o.fast_k[2], false));
QUEUES[3].push_back(pk(o.grid[2], false));
QUEUES[2].push_back(pk(o.quadtree[1], false));
QUEUES[4].push_back(pk(o.gaussian[0], false));
QUEUES[1].push_back(pk(o.angle[0], false));
QUEUES[3].push_back(pk(o.quadtree[2], false));
QUEUES[5].push_back(pk(o.grid[3], false));
QUEUES[1].push_back(pk(o.gaussian[1], false));
QUEUES[2].push_back(pk(o.angle[1], false));
QUEUES[5].push_back(pk(o.gaussian[2], false));
QUEUES[3].push_back(pk(o.angle[2], false));
QUEUES[4].push_back(pk(o.quadtree[3], false));
QUEUES[4].push_back(pk(o.grid[4], false));
QUEUES[4].push_back(pk(o.quadtree[4], false));
QUEUES[4].push_back(pk(o.gaussian[3], false));
QUEUES[5].push_back(pk(o.angle[3], false));
QUEUES[5].push_back(pk(o.grid[5], false));
QUEUES[5].push_back(pk(o.gaussian[4], false));
QUEUES[3].push_back(pk(o.angle[4], false));
QUEUES[3].push_back(pk(o.quadtree[5], false));
QUEUES[3].push_back(pk(o.grid[6], false));
QUEUES[3].push_back(pk(o.gaussian[5], false));
QUEUES[1].push_back(pk(o.angle[5], false));
QUEUES[4].push_back(pk(o.quadtree[6], false));
QUEUES[1].push_back(pk(o.grid[7], false));
QUEUES[1].push_back(pk(o.quadtree[7], false));
QUEUES[4].push_back(pk(o.angle[6], false));
QUEUES[1].push_back(pk(o.angle[7], false));
QUEUES[4].push_back(pk(o.orb[0], false));
QUEUES[2].push_back(pk(o.orb[1], false));
QUEUES[1].push_back(pk(o.orb[2], false));
QUEUES[5].push_back(pk(o.orb[3], false));
QUEUES[3].push_back(pk(o.orb[4], false));
QUEUES[3].push_back(pk(o.orb[5], false));
QUEUES[5].push_back(pk(o.orb[6], false));
QUEUES[1].push_back(pk(o.orb[7], false));

for(int i=0; i < 8; i++) {
QUEUES[2].push_back(pk(o.scaleVector[i], false));
}
